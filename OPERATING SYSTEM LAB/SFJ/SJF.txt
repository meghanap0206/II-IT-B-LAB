AIM: Write a C program to implement the various process scheduling mechanisms such as SJF scheduling.

ALGORITHM:

SJF - Short Job First Schedulinf Algorithm
1: Start the process
2: Accept the number of processes in the ready Queue
3: For each process in the ready Q, assign the process id and accept the CPU burst time
4: Arrange the burst times of each process in ascending order(Shortest burst time process is assigned as '0' process)
5: Set the waiting of the first process as ‘0’ and its burst time as its turn around time
6: for each process in the Ready Q calculate
	a. Waiting time for process(n)= waiting time of process (n-1) + Burst time of process(n-1)
	b. Turnaround time for Process(n)= waiting time of Process(n)+ Burst time for process(n)
7: Calculate
	a. Average waiting time = Total waiting Time / Number of process
	b. Average Turnaround time = Total Turnaround Time / Number of process
8: Stop the process

#include<stdio.h>
main()
{
 int st[10],bt[10],wt[10],tat[10],n,tq;
 int i,count=0,swt=0,stat=0,temp,sq=0;
 float awt,atat;
 printf("enter the number of processes");
 scanf("%d",&n);
 printf("enter the burst time of each process /n");
 for(i=0;i<n;i++)
 {
printf(("p%d",i+1);
scanf("%d",&bt[i]);
 st[i]=bt[i];
 }
 printf("enter the time quantum");
 scanf("%d",&tq);
 while(1)
 {
 for(i=0,count=0;i<n;i++)
 {
 temp=tq;
 if(st[i]==0)
 {
 count++;
 continue;
 }
 if(st[i]>tq)
 st[i]=st[i]-tq;
else
 if(st[i]>=0)
 {
 temp=st[i];
 st[i]=0;
 }
 sq=sq+temp;
 tat[i]=sq;
 }
 if(n==count)
 break;
 }
 for(i=0;i<n;i++)
 {
 wt[i]=tat[i]-bt[i];
 swt=swt+wt[i];
 stat=stat+tat[i];
 }
 awt=(float)swt/n;
 atat=(float)stat/n;
 printf("process no\t burst time\t waiting time\t turnaround time\n");
 for(i=0;i<n;i++)
 printf("%d\t\t %d\t\t %d\t\t %d\n",i+1,bt[i],wt[i],tat[i]);
 printf("avg wt time=%f,avg turn around time=%f",awt,atat);
} 
